# LangShift.dev - 多语言学习平台 - Cursor 规则

## 项目概述
LangShift.dev 是一个专门为开发者设计的编程语言转换学习平台。通过对比不同编程语言的语法特性和概念映射，帮助开发者快速掌握新语言。项目使用 Next.js + Fumadocs 构建文档网站，支持多种语言转换学习，并集成了交互式代码编辑器。

## 核心原则

### 1. 语言对比教学
- 始终从已知语言视角解释新语言概念
- 提供语言间的语法对比和概念映射
- 使用开发者熟悉的术语和概念
- 强调不同语言的异同点和设计哲学
- 使用 `<PythonEditor>` 和对比组件展示代码差异

### 2. 渐进式学习
- 按照模块顺序组织内容
- 每个概念都要有实际代码示例
- 提供练习题和实战项目
- 确保学习路径的连贯性
- 从基础语法到高级特性逐步深入

### 3. 实用性导向
- 重点讲解开发者最需要的语言技能
- 包含 Web 开发、数据处理、系统编程等应用场景
- 提供真实项目案例
- 注重工程化实践
- 强调性能优化和最佳实践

## 代码风格规范

### 通用代码规范
- 遵循各语言的官方编码规范
- 使用类型注解（支持的语言）
- 添加详细的注释和文档字符串
- 使用现代语言特性
- 遵循命名规范（各语言的约定）

### 对比代码要求
- 提供功能相同的多语言实现
- 标注语法差异和概念映射
- 使用各语言的惯用写法
- 保持代码风格的一致性

### 文档结构
- 使用 Markdown 格式
- 包含代码高亮和语法高亮
- 提供交互式代码示例
- 使用清晰的标题层级
- 集成代码编辑器组件

## 内容组织规则

### 每个语言转换模块应包含：
1. **概念介绍** - 从已知语言视角解释新语言概念
2. **语法对比** - 语言间的语法映射
3. **代码示例** - 使用编辑器组件展示可运行代码
4. **练习题** - 巩固学习内容
5. **实战项目** - 综合应用所学知识

### 代码示例要求：
- 使用编辑器组件包装代码
- 提供完整的可运行代码
- 包含错误处理和边界情况
- 添加详细的中文注释
- 提供测试用例
- 支持对比模式

### 编辑器组件使用规范：
```mdx
<PythonEditor title="示例标题" compare={true}>
```javascript !! js
// JavaScript 代码
console.log("Hello World");
```

```python !! py
# Python 代码
print("Hello World")
```

```rust !! rs
// Rust 代码
fn main() {
    println!("Hello World");
}
```
</PythonEditor>
```

## 技术栈规范

### 文档网站
- Next.js 15+ (App Router)
- Fumadocs 文档框架
- Tailwind CSS 样式
- Monaco Editor 代码编辑器
- 多语言运行时支持

### 语言运行时
- **Python**: Pyodide (浏览器端 Python)
- **JavaScript**: V8 Engine
- **Rust**: WebAssembly (计划中)
- **其他语言**: 根据需求扩展

### 开发工具
- VSCode 配置
- 多语言扩展推荐
- 调试配置
- Git 工作流

## AI 助手行为准则

### 回答风格
- 使用中文回答
- 语言简洁明了
- 提供具体代码示例
- 解释概念时要有语言对比
- 推荐使用编辑器组件

### 代码生成
- 生成符合各语言规范的代码
- 提供对应的多语言实现
- 包含完整的错误处理
- 添加详细的中文注释
- 使用编辑器组件包装

### 问题解决
- 优先考虑开发者的思维习惯
- 提供多种解决方案
- 解释选择特定方案的原因
- 考虑性能和最佳实践
- 利用运行时进行代码验证

## 文件命名规范

### 文档文件
- 语言转换模块：`{source}2{target}/`
- 示例代码：`examples/{language}/{name}.{ext}`
- 练习题：`exercises/{module}/{name}.md`
- 项目文件：`projects/{name}/`

### 代码文件
- 使用各语言的命名约定
- 测试文件：`test_{module}.{ext}`
- 配置文件：使用 kebab-case

### 组件文件
- React 组件：使用 PascalCase
- TypeScript 文件：使用 PascalCase
- 样式文件：使用 kebab-case

## 质量保证

### 代码质量
- 所有代码必须可运行
- 通过静态检查工具验证
- 包含适当的测试用例
- 遵循最佳实践
- 在编辑器中测试执行

### 文档质量
- 内容准确无误
- 示例代码完整
- 链接和引用正确
- 格式规范统一
- 交互式代码示例可用

### 用户体验
- 学习路径清晰
- 示例代码易懂
- 练习题难度适中
- 提供足够的上下文
- 代码编辑器响应迅速

## 特殊指令

### 当用户询问语言概念时：
1. 先解释对应的已知语言概念
2. 展示新语言的语法和用法
3. 提供对比示例（使用编辑器组件）
4. 说明使用场景和注意事项

### 当用户需要代码示例时：
1. 使用编辑器组件包装代码
2. 提供完整的可运行代码
3. 包含对应的多语言实现
4. 添加详细的中文注释
5. 说明代码的工作原理

### 当用户遇到问题时：
1. 分析问题的根本原因
2. 提供多种解决方案
3. 解释每种方案的优缺点
4. 推荐最佳实践
5. 在编辑器中验证解决方案

## 项目维护

### 定期更新
- 保持语言版本兼容性
- 更新依赖包版本
- 检查示例代码的有效性
- 更新最佳实践建议
- 维护运行时版本

### 内容改进
- 根据用户反馈优化内容
- 添加更多实用示例
- 完善练习题和项目
- 更新技术栈和工具
- 优化编辑器组件性能

### 编辑器组件维护
- 确保多语言运行时兼容性
- 优化代码执行性能
- 改进错误处理机制
- 增强主题切换功能
- 完善对比模式体验

## 多语言支持规范

### 语言转换模块开发
- 每个语言转换模块独立组织
- 保持模块间的一致性
- 支持渐进式扩展
- 维护语言特性的准确性

### 国际化支持
- 支持中英文双语界面
- 文档内容本地化
- 代码注释多语言支持
- 错误信息本地化

### 扩展性设计
- 支持新语言快速接入
- 模块化架构设计
- 插件化功能扩展
- 向后兼容性保证

---

记住：这个项目的核心目标是帮助开发者快速掌握新编程语言，因此所有的解释和示例都应该从语言对比的角度出发，并充分利用编辑器组件提供交互式学习体验。 