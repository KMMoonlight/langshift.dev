# JavaScript 到 Python 转换学习模块 - Cursor 规则

## 模块概述
本模块专注于 JavaScript 到 Python 的语言转换学习，通过对比教学帮助开发者快速掌握 Python 编程。

## 核心原则

### 1. JavaScript 视角教学
- 始终从 JavaScript 开发者的思维习惯出发
- 使用 JavaScript 概念解释 Python 特性
- 强调两种语言的语法差异和概念映射
- 避免直接翻译，注重理解设计哲学差异

### 2. Python 最佳实践
- 遵循 PEP 8 代码风格指南
- 使用 Pythonic 的惯用写法
- 强调可读性和简洁性
- 介绍 Python 社区的最佳实践

### 3. 对比学习策略
- 每个概念都要提供 JavaScript 和 Python 的对比
- 使用编辑器组件展示可运行的代码示例
- 解释语法差异背后的设计理念
- 提供性能特性和使用场景对比

## 代码示例规范

### 编辑器组件使用
```mdx
<PythonEditor title="示例标题" compare={true}>
```javascript !! js
// JavaScript 代码
console.log("Hello World");
```

```python !! py
# Python 代码
print("Hello World")
```
</PythonEditor>
```

### 代码注释要求
- JavaScript 代码使用 `//` 注释
- Python 代码使用 `#` 注释
- 添加详细的中文解释
- 标注语法差异和概念映射

### 对比示例结构
1. **概念介绍** - 从 JavaScript 视角解释
2. **语法对比** - 并排显示两种语言实现
3. **差异说明** - 解释语法差异和设计理念
4. **使用场景** - 说明何时使用哪种语言特性
5. **性能分析** - 对比两种实现的性能特点

## 内容组织规则

### 每个学习模块应包含：
1. **概念引入** - 从 JavaScript 概念开始
2. **Python 语法** - 展示对应的 Python 实现
3. **对比分析** - 详细解释差异和原因
4. **实际应用** - 提供真实的使用场景
5. **练习题** - 巩固学习内容
6. **最佳实践** - Python 特有的编码规范

### 重点概念对比
- **变量声明**: `let/const` vs 直接赋值
- **函数定义**: `function` vs `def`
- **类定义**: `class` vs `class`
- **异步编程**: Promise vs async/await
- **模块系统**: ES6 modules vs Python modules
- **错误处理**: try-catch vs try-except

## AI 助手行为准则

### 回答风格
- 使用中文回答
- 从 JavaScript 视角解释 Python 概念
- 提供具体的代码对比示例
- 推荐使用编辑器组件
- 关注 Python 的性能特性

### 代码生成
- 生成符合 PEP 8 规范的 Python 代码
- 提供对应的 JavaScript 实现
- 包含完整的错误处理
- 添加详细的中文注释
- 使用编辑器组件包装
- 考虑 Python 的性能优化

### 问题解决
- 优先考虑 JavaScript 开发者的思维习惯
- 提供多种 Python 解决方案
- 解释选择特定方案的原因
- 考虑 Python 的性能特性
- 利用编辑器进行代码验证
- 分析 Python 特有的性能瓶颈

## 特殊指令

### 当用户询问 Python 概念时：
1. 先解释对应的 JavaScript 概念
2. 展示 Python 的语法和用法
3. 提供对比示例（使用编辑器组件）
4. 说明使用场景和注意事项
5. 分析 Python 的性能特性

### 当用户需要代码示例时：
1. 使用编辑器组件包装代码
2. 提供完整的可运行代码
3. 包含 JavaScript 和 Python 的对比实现
4. 添加详细的中文注释
5. 说明代码的工作原理
6. 提供 Python 性能优化建议

### 当用户遇到问题时：
1. 分析问题的根本原因
2. 提供多种 Python 解决方案
3. 解释每种方案的优缺点
4. 推荐 Python 最佳实践
5. 在编辑器中验证解决方案
6. 考虑 Python 特有的性能影响

## 质量保证

### 代码质量
- 所有 Python 代码必须符合 PEP 8 规范
- 通过静态检查工具验证
- 包含适当的测试用例
- 遵循 Python 最佳实践
- 在编辑器中测试执行
- 性能监控和优化

### 文档质量
- 内容准确无误
- 示例代码完整可运行
- 链接和引用正确
- 格式规范统一
- 交互式代码示例可用
- 多语言内容同步

### 用户体验
- 学习路径清晰
- 示例代码易懂
- 练习题难度适中
- 提供足够的上下文
- 代码编辑器响应迅速
- 性能优化体验

## 模块特定规范

### Python 特有概念
- **列表推导式**: 对比 JavaScript 的 map/filter
- **装饰器**: 对比 JavaScript 的高阶函数
- **上下文管理器**: 对比 JavaScript 的 try-finally
- **生成器**: 对比 JavaScript 的迭代器
- **类型注解**: 对比 TypeScript 的类型系统

### 性能优化重点
- **内存管理**: 引用计数 vs 垃圾回收
- **执行模型**: 字节码 vs JIT 编译
- **并发编程**: GIL 限制 vs 事件循环
- **数据处理**: NumPy/Pandas vs JavaScript 数组

### 生态系统对比
- **包管理**: pip vs npm
- **虚拟环境**: venv vs node_modules
- **构建工具**: setuptools vs webpack
- **测试框架**: pytest vs Jest

---

记住：这个模块的核心目标是帮助 JavaScript 开发者快速掌握 Python，因此所有的解释和示例都应该从 JavaScript 的视角出发，并充分利用编辑器组件提供交互式学习体验。同时要注重 Python 特有的最佳实践和性能特性。 