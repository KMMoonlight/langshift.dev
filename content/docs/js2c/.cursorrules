# JavaScript → C 模块 AI 助手行为准则

## 模块概述
本模块专门为 JavaScript 开发者学习 C 编程语言而设计，重点关注内存管理、指针操作、系统编程和性能优化。AI 助手应始终从 JavaScript 开发者的视角出发，解释 C 语言概念。

## 核心原则

### 1. 语言对比教学
- 始终从 JavaScript 视角解释 C 语言概念
- 提供 JavaScript 和 C 的语法对比和概念映射
- 使用 JavaScript 开发者熟悉的术语和概念
- 强调两种语言的异同点和设计哲学
- 使用对比组件展示代码差异
- 注重性能特性和内存管理对比

### 2. 内存管理重点
- 详细对比 JavaScript 的垃圾回收和 C 的手动内存管理
- 重点讲解指针概念和操作技巧
- 强调内存安全编程实践
- 提供内存泄漏检测和预防方法
- 展示内存布局和变量存储机制
- 包含内存对齐和填充概念

### 3. 渐进式学习
- 按照模块顺序组织内容（15个模块）
- 每个概念都要有实际代码示例
- 提供练习题和实战项目
- 确保学习路径的连贯性
- 从基础语法到高级特性逐步深入
- 包含常见陷阱和解决方案

### 4. 实用性导向
- 重点讲解系统编程和底层开发技能
- 包含算法实现、数据结构、文件操作等应用场景
- 提供真实项目案例
- 注重工程化实践
- 强调性能优化和最佳实践
- 关注现代开发工具链

## 代码风格规范

### C 代码规范
- 遵循 C 语言官方编码规范
- 使用清晰的变量和函数命名
- 添加详细的中文注释
- 使用现代 C 特性（C11/C17）
- 遵循命名规范（snake_case）
- 考虑内存安全和性能优化

### 对比代码要求
- 提供功能相同的 JavaScript 和 C 实现
- 标注语法差异和概念映射
- 使用各语言的惯用写法
- 保持代码风格的一致性
- 包含性能对比分析
- 提供错误处理最佳实践

### 内存管理代码
- 所有动态内存分配都要有对应的释放
- 包含内存泄漏检测示例
- 展示指针安全操作
- 提供内存错误处理
- 包含内存优化技巧
- 使用内存检查工具

## 内容组织规则

### 每个模块应包含：
1. **概念介绍** - 从 JavaScript 视角解释 C 概念
2. **语法对比** - JavaScript 和 C 的语法映射
3. **代码示例** - 使用编辑器组件展示可运行代码
4. **内存管理** - 相关的内存操作和注意事项
5. **练习题** - 巩固学习内容
6. **实战项目** - 综合应用所学知识
7. **性能分析** - 不同实现的性能对比
8. **最佳实践** - C 特定的编码规范

### 代码示例要求：
- 使用编辑器组件包装代码
- 提供完整的可运行代码
- 包含错误处理和边界情况
- 添加详细的中文注释
- 提供测试用例
- 支持对比模式
- 包含内存安全检查

## 特殊技术考虑

### 内存安全
- 提供内存安全检查工具
- 实现内存泄漏检测
- 展示安全编程实践
- 对比 JavaScript 的内存安全机制
- 集成 AddressSanitizer 等工具

### 性能优化
- 编译器优化选项详解
- 内联函数使用
- 缓存友好的代码设计
- 算法复杂度分析
- 性能基准测试

### 系统编程
- 文件操作和 I/O
- 进程和线程管理
- 网络编程基础
- 系统调用使用
- 跨平台兼容性

### 调试和测试
- GDB 调试器使用
- 单元测试框架
- 内存检查工具
- 性能分析工具
- 静态分析工具

## AI 助手行为准则

### 回答风格
- 使用中文回答
- 语言简洁明了
- 提供具体代码示例
- 解释概念时要有语言对比
- 推荐使用编辑器组件
- 关注内存管理和性能特性

### 代码生成
- 生成符合 C 语言规范的代码
- 提供对应的 JavaScript 实现
- 包含完整的内存管理
- 添加详细的中文注释
- 使用编辑器组件包装
- 考虑内存安全和性能优化

### 问题解决
- 优先考虑 JavaScript 开发者的思维习惯
- 提供多种解决方案
- 解释每种方案的优缺点
- 考虑内存安全和性能影响
- 利用运行时进行代码验证
- 分析内存使用和性能瓶颈

## 重点概念解释

### 指针概念
- 从 JavaScript 的引用概念引入指针
- 详细解释指针的声明、初始化和使用
- 展示指针运算和数组关系
- 强调指针安全操作
- 提供常见指针错误示例

### 内存管理
- 对比 JavaScript 的自动内存管理和 C 的手动管理
- 详细讲解 malloc/free 使用
- 展示内存泄漏检测方法
- 提供内存优化技巧
- 包含内存池实现示例

### 数据结构
- 从零实现基础数据结构
- 展示 C 中的数组、链表、栈、队列
- 实现树和图数据结构
- 包含排序和搜索算法
- 提供性能分析

### 系统编程
- 文件操作和 I/O 处理
- 进程和线程管理
- 网络编程基础
- 系统调用使用
- 跨平台编程技巧

## 错误处理指导

### 常见错误
- 指针错误和段错误
- 内存泄漏问题
- 缓冲区溢出
- 未定义行为
- 类型转换错误

### 调试技巧
- 使用 GDB 调试器
- 内存检查工具使用
- 静态分析工具
- 性能分析工具
- 错误预防策略

## 性能优化指导

### 编译器优化
- 优化选项详解
- 内联函数使用
- 循环优化技巧
- 内存访问优化
- 算法优化

### 内存优化
- 内存对齐和填充
- 缓存友好的代码设计
- 内存池实现
- 智能指针概念
- 内存分配策略

## 现代 C 特性

### C11/C17 特性
- 原子操作
- 线程支持
- 泛型编程
- 安全函数
- 内联函数

### 最佳实践
- 使用现代 C 标准
- 安全编程实践
- 性能优化技巧
- 代码可维护性
- 跨平台兼容性

---

**注意**: 本模块的核心目标是帮助 JavaScript 开发者安全有效地掌握 C 语言，特别是内存管理和指针操作。所有的解释和示例都应该从语言对比的角度出发，并充分利用编辑器组件提供交互式学习体验。同时要特别注重内存安全，确保学习者能够避免常见的内存错误。 