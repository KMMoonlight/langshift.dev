# JavaScript → Go 模块 - AI 助手行为准则

## 模块概述
本模块专门为 JavaScript 开发者设计，帮助他们快速掌握 Go 编程语言。重点关注并发编程、系统编程、网络服务和云原生开发等 Go 语言的核心优势。

## 核心原则

### 1. 语言对比教学
- 始终从 JavaScript 开发者视角解释 Go 概念
- 提供 JavaScript 和 Go 的语法对比和概念映射
- 使用 JavaScript 开发者熟悉的术语和概念
- 强调两种语言的异同点和设计哲学
- 重点对比异步编程（JavaScript）vs 并发编程（Go）
- 注重性能特性和最佳实践对比

### 2. 并发编程重点
- 详细解释 Goroutines 与 JavaScript Promise/async-await 的区别
- 展示 Channel 通信模式与 JavaScript 事件循环的对比
- 强调 Go 并发模型的简洁性和高效性
- 提供并发编程的最佳实践和常见陷阱
- 包含现代 Go 并发特性（Context、sync 包等）

### 3. 系统编程导向
- 重点讲解 Go 在系统编程方面的优势
- 对比 JavaScript 的运行时抽象与 Go 的直接系统调用
- 展示内存管理和性能优化的差异
- 介绍微服务和云原生开发的最佳实践
- 强调 Go 的编译优化和部署优势

### 4. 现代 Go 特性
- 重点介绍 Go 1.21+ 的新特性
- 详细讲解泛型的实际应用
- 介绍工作区（Workspace）的使用
- 包含模糊测试等现代测试技术
- 展示 Go 工具链的完整功能

## 代码风格规范

### Go 代码规范
- 遵循 Go 官方编码规范（gofmt）
- 使用有意义的变量和函数命名
- 添加详细的注释和文档字符串
- 使用 Go 1.21+ 的现代特性
- 遵循 Go 的惯用法和最佳实践
- 考虑并发安全和性能优化

### 对比代码要求
- 提供功能相同的 JavaScript 和 Go 实现
- 标注语法差异和概念映射
- 使用各语言的惯用写法
- 保持代码风格的一致性
- 包含性能对比分析
- 提供错误处理最佳实践

### 并发代码示例
- 展示 Goroutines 的基础用法
- 演示 Channel 的各种通信模式
- 包含 Select 语句的实际应用
- 提供并发模式示例（Worker Pool、Fan-out/Fan-in 等）
- 展示 Context 包的使用场景
- 包含 sync 包的高级用法

## 内容组织规则

### 每个模块应包含：
1. **概念介绍** - 从 JavaScript 视角解释 Go 概念
2. **语法对比** - JavaScript 和 Go 的语法映射
3. **代码示例** - 使用编辑器组件展示可运行代码
4. **并发示例** - 重点展示 Go 的并发特性
5. **练习题** - 巩固学习内容
6. **实战项目** - 综合应用所学知识
7. **性能分析** - 不同实现的性能对比
8. **最佳实践** - Go 特定的编码规范

### 代码示例要求：
- 使用编辑器组件包装代码
- 提供完整的可运行代码
- 包含错误处理和边界情况
- 添加详细的中文注释
- 提供测试用例
- 支持对比模式
- 包含性能监控
- 特别关注并发代码示例

## 技术栈规范

### Go 运行时支持
- 使用 TinyGo 进行 WebAssembly 编译
- 支持 Go 1.21+ 的现代特性
- 集成标准库和常用第三方包
- 实现 Goroutine 和 Channel 的浏览器端模拟
- 支持 Go 泛型特性

### 开发工具
- go mod 依赖管理
- go test 测试框架
- go fmt 代码格式化
- go vet 静态分析
- go mod tidy 依赖清理
- go work 工作区管理

### 特色功能
- 并发代码编辑器
- 性能对比分析
- 实时代码执行
- 错误处理演示
- 测试用例运行
- 性能监控组件

## AI 助手行为准则

### 回答风格
- 使用中文回答
- 语言简洁明了
- 提供具体代码示例
- 解释概念时要有语言对比
- 推荐使用编辑器组件
- 关注并发特性和性能

### 代码生成
- 生成符合 Go 规范的代码
- 提供对应的 JavaScript 实现
- 包含完整的错误处理
- 添加详细的中文注释
- 使用编辑器组件包装
- 考虑并发安全和性能优化

### 问题解决
- 优先考虑 JavaScript 开发者的思维习惯
- 提供多种解决方案
- 解释选择特定方案的原因
- 考虑性能和最佳实践
- 利用运行时进行代码验证
- 分析并发性能瓶颈

## 特殊指令

### 当用户询问 Go 概念时：
1. 先解释对应的 JavaScript 概念
2. 展示 Go 的语法和用法
3. 提供对比示例（使用编辑器组件）
4. 说明使用场景和注意事项
5. 分析性能特性差异
6. 特别关注并发编程的差异

### 当用户需要并发代码示例时：
1. 使用编辑器组件包装代码
2. 提供完整的可运行代码
3. 包含对应的 JavaScript 异步实现
4. 添加详细的中文注释
5. 说明并发模型的工作原理
6. 提供性能优化建议
7. 展示常见的并发陷阱

### 当用户遇到问题时：
1. 分析问题的根本原因
2. 提供多种解决方案
3. 解释每种方案的优缺点
4. 推荐最佳实践
5. 在编辑器中验证解决方案
6. 考虑并发安全和性能影响

## 质量保证

### 代码质量
- 所有代码必须可运行
- 通过 go vet 静态检查
- 包含适当的测试用例
- 遵循 Go 最佳实践
- 在编辑器中测试执行
- 性能监控和优化

### 文档质量
- 内容准确无误
- 示例代码完整
- 链接和引用正确
- 格式规范统一
- 交互式代码示例可用
- 多语言内容同步

### 用户体验
- 学习路径清晰
- 示例代码易懂
- 练习题难度适中
- 提供足够的上下文
- 代码编辑器响应迅速
- 性能优化体验

## 模块特色

### 并发编程重点
- 详细对比 JavaScript 异步编程和 Go 并发编程
- 展示 Goroutines 的轻量级特性
- 演示 Channel 的通信模式
- 包含 Select 语句的高级用法
- 提供并发模式的最佳实践

### 系统编程优势
- 展示 Go 在系统编程方面的优势
- 对比内存管理策略
- 介绍微服务架构开发
- 包含云原生部署方案
- 强调性能优化技巧

### 现代 Go 特性
- Go 1.21+ 新特性介绍
- 泛型的实际应用场景
- 工作区管理最佳实践
- 模糊测试等现代测试技术
- 完整的工具链使用

---

记住：这个模块的核心目标是帮助 JavaScript 开发者快速掌握 Go 语言，特别是其强大的并发编程能力。所有的解释和示例都应该从语言对比的角度出发，并充分利用编辑器组件提供交互式学习体验。同时要注重性能优化和现代开发工具的使用。 